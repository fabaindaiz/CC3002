Tarea CC3002 v2.0

Empezando
    Este proyecto tiene por finalidad cumplir con las tareas de CC3002 para este semestre
    Actualmente está implementado hasta lo pedido en el segundo enunciado
    Cualquier información no disponible en este documento se podra encontrar en la documentación de las clases y metodos

Requisitos
    Para ejecutar el proyecto se necesita tener java 11 o superior instalado (JDK)
    Actualmente lo único funcional del proyecto son las test y se deben correr en un IDE con JUnit 5

Descripción del proyecto
    Esta tarea fue hecha considerando lo visto en CC3002

    Se implementaron 8 interfaces principales:
        IUnit e IEquipableItem: Unidades e Items
        IField:                 Mapa de la partida
        ITactician:             Jugador de la partida
        IGameController:        Controlador de la partida
        IParameter:             Parámetros de configuración de la partida
        IObserver e ISubject:   Observador y Sujeto observado

    Se implemento usando un patrón de diseño MVC (Modelo-Vista-Controlador)
    A continuación se menciona a que parte del diseño pertenece cada interfaz
        M (Modelo):
            IUnit
            IEquipableItem
            IField
            ITactician
        V (Vista):
        C (Controlador):
            IGameController
            IParameter
            IObserver
            ISubject

    Estructura interna del Modelo:
    Cada interfaz posee una clase abstracta principal

    Todas las armas y unidades similares están implementadas con clases abstractas asociadas a su clase abstracta principal
    Estas clases abstractas son implementadas por una clase especifica por cada arma o unidad existente
    Esto se hizo a fin de facilitar futuras implementaciones en el proyecto

    Para ejecutar diferentes acciones dependiendo del caso como en los ataques o en los test, se usó Double Dispatch
    Esto permite tener funciones en cada clase que generan un comportamiento distinto según sea requerido

    El mapa fue creado como un objeto que contiene los nodos en un Map<Location> y métodos para crearse de forma aleatoria

    La clase Tactician representa a un jugador del juego
    Este jugador posee unidades que están colocadas en el mapa

    Estructura interna de la Vista:

    Estructura interna del Controlador:
    Cada interfaz posee una clase abstracta principal
    (Excepto IObserver, ya que todos los Observer son completamente independientes en funcionalidad)

    Ademas, existe una única clase abstracta que no posee interfaz llamada GameInitializatión
    Esta se encarga de inicializar lo necesario para una nueva partida al llamarse InitGame

    La clase Parameter guarda todos los parametros de una partida para poder replicarla
    Se implemento un Observer simple para las funciones que lo requieran
        Hay más información de estas clases en la siguiente sección

Decisiones relevantes
    Se enumeraran a continuación todas las decisiones no mencionadas en la descripción que se tomaron al realizar el proyecto
    Para consultas especificas del funcionamiento de las clases y métodos, consultar la documentación de cada interfaz

    Comentarios para la Entrega 1:
    - Se crearon clases abstractas para agrupar armas y unidades similares para facilitar futuras implementaciones
        Así, se redujo el código duplicado en situaciones similares, como al equipar un MagicBook en Sorcerer
        o al atacar a unidades que tengan armas con las mismas debilidades, como Magias vs Armas normales.

    - Para el contraataque, se optó por tener el método ataque con un parámetro boolean que indica si es necesario
        Además, las armas poseen un método que indica si son armas que realizas contraataque o no.

    - Los sistemas de daño modificado se implementaron como métodos en las distintas armas
        Así además, según el arma que ataca se llama a un método de daño en la unidad distinto según el caso
        Se implemento la curación, como una llamada que se realiza al recibirse un ataque con Staff

    - Los sistemas de equipados de items se hizo con Double Dispatch.
        Cada arma es llamada al momento de ser equipada y devuelve un llamado a la unidad dependiendo de su tipo

    - Los ataques son recibidos y ejecutados por el arma equipada, desligando esto de las unidades
        (En un inicio se pensó usar una clase ataque, pero se descartó para usar esta implementación)
    - El aumento y disminución de valores y la verificaciones de armas son las únicas partes del combate
        que se implementaron en la unidad, esto con fin de evitar problemas con unidades sin armas
        (Una posible propuesta fue implementar una clase "nullWeapon", pero se descartó temporalmente)
    - Toda unidad sin arma equipada recibe daño sin modificar, esto se ejecuta directamente en la unidad

    - Una unidad muerta simplemente posee localización nula, así nadie puede interactuar con ella
        Se verifica además que ninguna función pueda ejecutarse o falle por puntero nulo

        EDIT entrega 2:
            Cuando una unidad muere, es eliminada del Tactician por IObserver
            Cada vez que se ejecuta un Observer, también lo hacen los Observer de niveles superiores

    - No se modificó nada del Template en model.map en esta entrega

    Comentarios para la Entrega 2:
    - Al inicio de esta entrega, se decidió revisar la visibilidad de todos los métodos y variables para dejarlas
        lo menos visible que se pueda, sin alterar el correcto funcionamiento del programa y los test

    - Todas las clases nuevas son parte del controlador, a excepción de la clase Tactician que es parte de modelo
        El controlador se encarga de preparar los elementos necesarios para la partida y controlar
         todos los elementos del modelo que dependan de las decisiones de los jugadores

    - Se decidió crear una interfaz para cada clase del controlador, esto para agrupar toda la documentación en la interfaz
        Esto no era necesario en GameController y Tactician, pero ayuda a evitar saturar de documentación la clase principal
        Además, ayuda a ordenar los métodos disponibles para el uso de los jugadores durante la partida

    - Además, para los Observer y Parameter, era necesario agruparlos en una interfaz por su funcionamiento
        Esto para cuando se guardan en ArrayList que pueden tener varios Observer o Parameter

    - De decidió crear una clase separada para guardar las variables del juego necesarias para inicializarlo
        Esto para simplificarme la inicialización de una nueva partida y el almacenamiento de los parametros

    - Para inicializar la partida se decidió crear una clase llamada Parameter, que almacena todos los parámetros de la partida
        Su uso es almacenar todas las unidades e items creadas antes de initGame, para poder volver a este estado
        Estos Parameter se guardan en un List, y poseen un método para crearse a sí mismos en la nueva partida
        Se separaron los parámetros en dos tipos: UnitParameter e ItemParameter, ambos con su propio método create()

    - Se decidió crear el método que genera el mapa en la clase Field, con un método que puede ser llamado desde GameController
        Esto porque el mapa tiene todos los datos necesarios para crearse a sí mismo una vez es llamado
        Además, esto permite delegar todas las acciones que corresponden al mapa a las clases Field y Location

    - Se creo una clase Observer muy simple para realizar las tareas de verificar derrota de Tactician o Unit
        Se crearon 3 subclases para cada caso que necesita ser observado: DefeatUnit, DefeatTactician y EndGame

    - Se creo una clase Subject muy simple, que simboliza el sujeto observable donde se guardan los Observers
        Esta clase puede ser extendida por cualquier otra clase abstracta para usar un Observer

Testeo
    Los test están implementados con JUnit 5

    Fueron creados test para todas clases y métodos del programa en variados casos estándares y bordes
    Existen 414 test en total y todas las clases del programa cumplen con un coverage del 100%

    Los test demoran entre 1 y 2 segundos en correr en mi pc (Portátil Windows 10 - i7 8gb ssd)
    El test que más tiempo demora en completarse es BenchmarkGenerateMap (entre 0.5 y 1.5 segundos)

    Las únicas funcionalidades sin test directo, pero con varios test indirectos son
        - En IField, el generador de mapa no posee un test directo
            Su funcionalidad se prueba en muchos test de IGameController, IObserver, entre otros
            Acá se verifica las invariantes del objeto y distintos casos bordes

        - En GameInitialization, el método InitAll no se testea directamente
            Su funcionalidad se testea directa e indirectamente por muchos otros test en casi todas las clases
            Si presentara un error, simplemente muchos test no pasarían, ya que es la parte principal del juego

        - La clase AbstractSubject no posee test directos ya que su funcionalidad es muy limitada por si solo
            Esta clase solo tiene funcionalidades completas cuando se arma toda la estructura del juego
            Esto porque no tiene una funcionalidad directa, sino que solo almacena y ejecuta observers

    Test del Modelo:
    Cada arma se testea con los mismos test básicos que verifican su correcto funcionamiento
    En esta parte no han habido muchos cambios desde el template además de añadir los test para las armas nuevas

    Cada Unidad se testea con los mismos test completos que verifican su correcto funcionamiento
    En esta parte se verifican todas las funcionalidades de las unidades con diferentes test
    También se verifica el sistema de armas y fortalezas en diversas pruebas de ataque y contraataque

    En el testeo, cada unidad con cada arma ataca a el resto de forma independiente, verificando así el funcionamiento completo
    Además, en cada test especifico se han añadido casos de borde para verificar que ninguna método falle en estos

    Los test del mapa se mantuvieron igual a como estaban en el Template usado

    EDIT entrega 2:
        Se añadieron los test de los nuevos métodos definidos en IUnit para el funcionamiento del modelo

        Se testean los métodos de ITactician de forma individual, para verificar su funcionalidad principal
        La mayoría de los test son iguales a los test definidos para los métodos de IGameController
        Esto porque algunos métodos de IGameController llaman directamente a los métodos en ITactician

        Se añadio un nuevo test a la clase IField, que verifica indirectamente el funcionamiento del generador de mapas

    Test de la Vista:

    Test del Controlador:
    Los métodos de IParameter se testean para cada unidad y su arma equipable para verificar su funcionamiento
    Se añadió un test independiente para parámetros nulos, que verifica que ocurre cuando son introducidos datos erróneos

    Los métodos de IObserver se testean de forma general para un par de casos dependiendo del Observer
    Todos los observer se complementan, así que puede que métodos de un Observer también se prueben en otro test

    Los métodos de ISubject se testean de forma completamente indirecta, desde los test de Observer
    Esto porque su funcionalidad es bastante limitada cuando no se usa de forma completa en una partida

    Los métodos de IGame controller
    Estos test se han basado en los test definidos en el template, fueron añadidos algunos test extra
    Las funcionalidades se testean de manera independiente con variados escenarios de casos generales y casos bordes

Hecho con
    Java 12 (compatible con Java 11 o superior)
    Intellij - IDE java
    JUnit 5 - Framework para test

Contribuciones
    Esto es un trabajo personal, sin contribuciones externas

Versionamiento
    Se uso git para el versionamiento. Para ver las versiones disponibles, revisa los Tags o Commits de este repositorio

Autores
    Ignacio Slater Muñoz - Template inicial
    Fabián Díaz González - Trabajo posterior

Licencia
    Este proyecto tiene licencia MIT, para mas detalles revisar archivo LICENCE

Cambios pendientes:
    - predefinedUnits && predefinedInits en GameInitialization
    -